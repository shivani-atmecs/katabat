package com.cmc.credagility.core.domain.channel;

import java.math.BigDecimal;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.springframework.util.StringUtils;

import com.cmc.credagility.core.domain.account.Account;
import com.cmc.credagility.core.domain.base.CreatorEntity;
import com.cmc.credagility.core.domain.responsible.Responsible;
import com.cmc.credagility.core.domain.type.ChannelResultStatus;

import com.ozstrategy.credagility.core.domain.ChannelAction;
import com.ozstrategy.credagility.core.domain.Node;
import com.ozstrategy.credagility.core.domain.SurveyFlowStep;
import com.ozstrategy.credagility.core.domain.document.EnterpriseDocument;
import com.ozstrategy.credagility.core.domain.workflow.WorkflowNodeActionTriggerType;
import com.ozstrategy.credagility.core.domain.workflow.bci.BCIWorkflowStep;


/**
 * This class is used to store base channel action information.
 *
 * <p><a href="BaseChannelResult.java.html"><i>View Source</i></a></p>
 *
 * @author   <a href="mailto:hao.kang@ozstrategy.com">Hao Kang</a>
 * @version  10/15/2014 15:24
 */
@MappedSuperclass public abstract class AbstractChannelResult extends CreatorEntity {
  //~ Static fields/initializers ---------------------------------------------------------------------------------------

  private static final long serialVersionUID = -8540916164489291608L;

  //~ Instance fields --------------------------------------------------------------------------------------------------

  /** Account. */
  @JoinColumn(
    name      = "accountNum",
    updatable = false
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected Account account;

  /** Shortcut to account information. */
  /** Account balance. */
  @Column(
    name     = "balance",
    nullable = true
  )
  protected BigDecimal balance;


  /** BCI Workflow Step. */
  @JoinColumn(
    name     = "bciWorkflowStepId",
    nullable = true
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected BCIWorkflowStep bciWorkflowStep;


  /** Channel Action. */
  @JoinColumn(
    name     = "channelActionId",
    nullable = true
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected ChannelAction channelAction;


  /** Channel Vendor. */
  @JoinColumn(
    name     = "channelVendorId",
    nullable = true
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected ChannelVendor channelVendor;

  /** Account current due. */
  @Column(name = "currentDue")
  protected BigDecimal currentDue;


  /** Enterprise Document. */
  @JoinColumn(
    name       = "documentId",
    updatable  = false,
    insertable = false
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected EnterpriseDocument document;

  /** Refer table 'PortfolioDocument'. */
  @Column protected Long documentId;


  /** execute Date. */
  @Column(name = "executeDate")
  @Temporal(TemporalType.TIMESTAMP)
  protected Date executeDate;


  /** Transient execute Result. */
  @Transient protected String executeResult;


  /** expected Export Date. */
  @Column(name = "expectedExportDate")
  @Temporal(TemporalType.TIMESTAMP)
  protected Date expectedExportDate;


  /** export Date. */
  @Column(name = "exportDate")
  @Temporal(TemporalType.TIMESTAMP)
  protected Date exportDate;


  /** Trigger node. */
  @JoinColumn(name = "nodeId")
  @ManyToOne(fetch = FetchType.LAZY)
  protected Node node;

  /** Account past due. */
  @Column(name = "pastDue")
  protected BigDecimal pastDue;

  /** Responsible. */
  @JoinColumn(name = "responsibleId")
  @ManyToOne(fetch = FetchType.LAZY)
  protected Responsible responsible;


  /** TODO: DOCUMENT ME! */
  @Column(name = "ruleBatchId")
  protected Long ruleBatchId;

  /** generating channel rule id. */
  @Column(name = "ruleId")
  protected Long ruleId;

  /** Whether this program is generated by strategy or CID. */
  @Column(
    name   = "source",
    length = 20
  )
  protected String source = "STRATEGY";

  // npelleti, 07/30, USBank, Added Not Null Constraint
  /** channel result status INIT/ EXPORTED/ EXECUTED. */
  @Column(
    name     = "status",
    nullable = false,
    length   = 10
  )
  @Enumerated(value = EnumType.STRING)
  protected ChannelResultStatus status;

  /** Strategy date. */
  @Column(
    name     = "strategyDate",
    nullable = false
  )
  @Temporal(TemporalType.TIMESTAMP)
  protected Date strategyDate;


  /** WorkflowNode Action TriggerType. */
  @Column(
    name     = "surveyFlowMode",
    length   = 32,
    nullable = true
  )
  @Enumerated(value = EnumType.STRING)
  protected WorkflowNodeActionTriggerType surveyFlowMode;


  /** Survey Flow Step. */
  @JoinColumn(
    name     = "surveyFlowStepId",
    nullable = true
  )
  @ManyToOne(fetch = FetchType.LAZY)
  protected SurveyFlowStep surveyFlowStep;

  /** Using template. */
  @Column(
    name     = "template",
    length   = 255,
    nullable = true
  )
  protected String template;

  /** Refer table 'PortfolioChannelTemplate'. */
  @Column protected Long templateId;


  /** unique Session Id. */
  @Column(
    name   = "uniqueSessionId",
    length = 50
  )
  protected String uniqueSessionId;

  //~ Methods ----------------------------------------------------------------------------------------------------------

  /**
   * getter method for result id.
   *
   * @return  Long
   */
  public abstract Long getResultId();

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * DOCUMENT ME!
   *
   * @param  resultId  DOCUMENT ME!
   */
  public abstract void setResultId(Long resultId);

  //~ ------------------------------------------------------------------------------------------------------------------

  /*
   * (non-Javadoc)
   *
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }

    if (getClass() != obj.getClass()) {
      return false;
    }

    AbstractChannelResult other = (AbstractChannelResult) obj;

    if (balance == null) {
      if (other.balance != null) {
        return false;
      }
    } else if (!balance.equals(other.balance)) {
      return false;
    }

    if (currentDue == null) {
      if (other.currentDue != null) {
        return false;
      }
    } else if (!currentDue.equals(other.currentDue)) {
      return false;
    }

    if (pastDue == null) {
      if (other.pastDue != null) {
        return false;
      }
    } else if (!pastDue.equals(other.pastDue)) {
      return false;
    }

    if (strategyDate == null) {
      if (other.strategyDate != null) {
        return false;
      }
    } else if (strategyDate.getTime() != (other.strategyDate.getTime())) {
      return false;
    }

    if (template == null) {
      if (other.template != null) {
        return false;
      }
    } else if (!template.equals(other.template)) {
      return false;
    }

    if (channelVendor == null) {
      if (other.channelVendor != null) {
        return false;
      }
    } else if (!channelVendor.getVendorId().equals(other.channelVendor.getVendorId())) {
      return false;
    }

    if (status == null) {
      if (other.status != null) {
        return false;
      }
    } else if (!status.equals(other.status)) {
      return false;
    }

    if (documentId == null) {
      if (other.documentId != null) {
        return false;
      }
    } else if (!documentId.equals(other.documentId)) {
      return false;
    }

    if (uniqueSessionId == null) {
      if (other.uniqueSessionId != null) {
        return false;
      }
    } else if (!uniqueSessionId.equals(other.uniqueSessionId)) {
      return false;
    }

    return true;
  } // end method equals

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The accountNum.
   *
   * @return  the accountNum
   *
   *          <p>column = "accountNum" class = "com.cmc.credagility.Account" insert = "true" update = "false" cascade =
   *          "none"</p>
   */
  public Account getAccount() {
    return account;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The balance.
   *
   * @return  the balance
   *
   *          <p>not-null = "true"</p>
   */
  public BigDecimal getBalance() {
    return balance;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for bci workflow step.
   *
   * @return  BCIWorkflowStep
   */
  public BCIWorkflowStep getBciWorkflowStep() {
    return bciWorkflowStep;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for channel action.
   *
   * @return  ChannelAction
   */
  public ChannelAction getChannelAction() {
    return channelAction;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for channel vendor.
   *
   * @return  ChannelVendor
   */
  public ChannelVendor getChannelVendor() {
    return channelVendor;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The currentDue.
   *
   * @return  the currentDue
   *
   *          <p>not-null = "false"</p>
   */
  public BigDecimal getCurrentDue() {
    return currentDue;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for document.
   *
   * @return  EnterpriseDocument
   */
  public EnterpriseDocument getDocument() {
    return document;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for document id.
   *
   * @return  Long
   */
  public Long getDocumentId() {
    return documentId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The executedDate.
   *
   * @return  the executedDate
   *
   *          <p>not-null = "false"</p>
   */
  public Date getExecuteDate() {
    return executeDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The executeResult.
   *
   * @return  the executeResult
   */
  public String getExecuteResult() {
    return this.executeResult;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for expected export date.
   *
   * @return  Date
   */
  public Date getExpectedExportDate() {
    return expectedExportDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The exportDate.
   *
   * @return  the exportDate
   *
   *          <p>not-null = "false"</p>
   */
  public Date getExportDate() {
    return exportDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for node.
   *
   * @return  Node
   */
  public Node getNode() {
    return node;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The pastDue.
   *
   * @return  the pastDue
   *
   *          <p>not-null = "false"</p>
   */
  public BigDecimal getPastDue() {
    return pastDue;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The responsibleId.
   *
   * @return  the responsibleId
   *
   *          <p>column = "responsibleId" class = "com.cmc.credagility.Responsible" insert = "true" update = "true"
   *          cascade = "none"</p>
   */
  public Responsible getResponsible() {
    return responsible;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The ruleBatchId.
   *
   * @return  the ruleBatchId
   *
   *          <p>not-null = "false"</p>
   */
  public Long getRuleBatchId() {
    return ruleBatchId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The Id of the rule creating this channel result. Could be null if this channel result is generated manually.
   *
   * @return  the Id of the rule creating this channel result. Could be null if this channel result is generated
   *          manually.
   *
   *          <p>not-null = "false"</p>
   */
  public Long getRuleId() {
    return ruleId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for source.
   *
   * @return  String
   */
  public String getSource() {
    if ((source == null) || source.equals("")) {
      source = "STRATEGY";
    }

    return source;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The status.
   *
   * @return  the status
   *
   *          <p>not-null = "true" length = "10" type = "com.cmc.dao.hibernate.support.ChannelResultStatusUserType"</p>
   */
  public ChannelResultStatus getStatus() {
    return status;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The strategyDate.
   *
   * @return  the strategyDate
   *
   *          <p>not-null = "true"</p>
   */
  public Date getStrategyDate() {
    return strategyDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for survey flow mode.
   *
   * @return  WorkflowNodeActionTriggerType
   */
  public WorkflowNodeActionTriggerType getSurveyFlowMode() {
    return surveyFlowMode;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for survey flow mode name.
   *
   * @return  String
   */
  public String getSurveyFlowModeName() {
    if (surveyFlowMode != null) {
      return surveyFlowMode.name();
    }

    return null;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for survey flow step.
   *
   * @return  SurveyFlowStep
   */
  public SurveyFlowStep getSurveyFlowStep() {
    return surveyFlowStep;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for survey flow step id.
   *
   * @return  Long
   */
  public Long getSurveyFlowStepId() {
    if (surveyFlowStep != null) {
      return surveyFlowStep.getId();
    }

    return null;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * The template.
   *
   * @return  the template
   *
   *          <p>not-null = "true" length = "20"</p>
   */
  public String getTemplate() {
    return template;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for template id.
   *
   * @return  Long
   */
  public Long getTemplateId() {
    return templateId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * getter method for unique session id.
   *
   * @return  String
   */
  public String getUniqueSessionId() {
    return uniqueSessionId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /*
   * (non-Javadoc)
   *
   * @see java.lang.Object#hashCode()
   */
  @Override public int hashCode() {
    final int prime  = 31;
    int       result = super.hashCode();
    result = (prime * result)
      + ((balance == null) ? 0 : balance.hashCode());
    result = (prime * result)
      + ((currentDue == null) ? 0 : currentDue.hashCode());
    result = (prime * result)
      + ((pastDue == null) ? 0 : pastDue.hashCode());
    result = (prime * result)
      + ((strategyDate == null) ? 0 : strategyDate.hashCode());
    result = (prime * result)
      + ((template == null) ? 0 : template.hashCode());
    result = (prime * result)
      + ((channelVendor == null) ? 0 : channelVendor.hashCode());
    result = (prime * result)
      + ((uniqueSessionId == null) ? 0 : uniqueSessionId.hashCode());

    return result;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * resetExpectedExportDate.
   *
   * @param  channelTypeId    Long
   * @param  date             Date
   * @param  timezoneId       String
   * @param  exportStartTime  String
   */
  public void resetExpectedExportDate(Long channelTypeId, Date date, String timezoneId, String exportStartTime) {
    if (exportStartTime != null) {
      String[] startTimeArr = { "0", "0", "0" };

      if (StringUtils.hasText(exportStartTime)) {
        startTimeArr = StringUtils.delimitedListToStringArray(exportStartTime, ":");
      }

      GregorianCalendar calbase = new GregorianCalendar(TimeZone.getTimeZone(timezoneId));
      calbase.setTimeInMillis(date.getTime());

      GregorianCalendar expectedTime = new GregorianCalendar(TimeZone.getTimeZone(timezoneId));
      expectedTime.setTimeInMillis(date.getTime());
      expectedTime.set(Calendar.HOUR_OF_DAY, Integer.valueOf(startTimeArr[0]));
      expectedTime.set(Calendar.MINUTE, Integer.valueOf(startTimeArr[1]));
      expectedTime.set(Calendar.SECOND, Integer.valueOf(startTimeArr[2]));

      if (!expectedTime.before(calbase)) {
        setExpectedExportDate(expectedTime.getTime());
      } else {
        expectedTime.add(Calendar.DAY_OF_MONTH, 1);
        setExpectedExportDate(expectedTime.getTime());
      }

    } // end if
  }   // end method resetExpectedExportDate

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for account.
   *
   * @param  account  Account
   */
  public void setAccount(Account account) {
    this.account = account;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for balance.
   *
   * @param  balance  BigDecimal
   */
  public void setBalance(BigDecimal balance) {
    this.balance = balance;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for bci workflow step.
   *
   * @param  bciWorkflowStep  BCIWorkflowStep
   */
  public void setBciWorkflowStep(BCIWorkflowStep bciWorkflowStep) {
    this.bciWorkflowStep = bciWorkflowStep;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for channel action.
   *
   * @param  channelAction  ChannelAction
   */
  public void setChannelAction(ChannelAction channelAction) {
    this.channelAction = channelAction;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for channel vendor.
   *
   * @param  channelVendor  ChannelVendor
   */
  public void setChannelVendor(ChannelVendor channelVendor) {
    this.channelVendor = channelVendor;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for current due.
   *
   * @param  currentDue  BigDecimal
   */
  public void setCurrentDue(BigDecimal currentDue) {
    this.currentDue = currentDue;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for document.
   *
   * @param  document  EnterpriseDocument
   */
  public void setDocument(EnterpriseDocument document) {
    this.document = document;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for document id.
   *
   * @param  documentId  Long
   */
  public void setDocumentId(Long documentId) {
    this.documentId = documentId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for execute date.
   *
   * @param  executeDate  Date
   */
  public void setExecuteDate(Date executeDate) {
    this.executeDate = executeDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for execute result.
   *
   * @param  executeResult  String
   */
  public void setExecuteResult(String executeResult) {
    this.executeResult = executeResult;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for expected export date.
   *
   * @param  expectedExportDate  Date
   */
  public void setExpectedExportDate(Date expectedExportDate) {
    this.expectedExportDate = expectedExportDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for export date.
   *
   * @param  exportDate  Date
   */
  public void setExportDate(Date exportDate) {
    this.exportDate = exportDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for node.
   *
   * @param  node  Node
   */
  public void setNode(Node node) {
    this.node = node;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for past due.
   *
   * @param  pastDue  BigDecimal
   */
  public void setPastDue(BigDecimal pastDue) {
    this.pastDue = pastDue;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for responsible.
   *
   * @param  responsible  Responsible
   */
  public void setResponsible(Responsible responsible) {
    this.responsible = responsible;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for rule batch id.
   *
   * @param  ruleBatchId  Long
   */
  public void setRuleBatchId(Long ruleBatchId) {
    this.ruleBatchId = ruleBatchId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for rule id.
   *
   * @param  ruleId  Long
   */
  public void setRuleId(Long ruleId) {
    this.ruleId = ruleId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for source.
   *
   * @param  source  String
   */
  public void setSource(String source) {
    this.source = source;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for status.
   *
   * @param  status  ChannelResultStatus
   */
  public void setStatus(ChannelResultStatus status) {
    this.status = status;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for strategy date.
   *
   * @param  strategyDate  Date
   */
  public void setStrategyDate(Date strategyDate) {
    this.strategyDate = strategyDate;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for survey flow mode.
   *
   * @param  surveyFlowMode  WorkflowNodeActionTriggerType
   */
  public void setSurveyFlowMode(WorkflowNodeActionTriggerType surveyFlowMode) {
    this.surveyFlowMode = surveyFlowMode;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for survey flow step.
   *
   * @param  surveyFlowStep  SurveyFlowStep
   */
  public void setSurveyFlowStep(SurveyFlowStep surveyFlowStep) {
    this.surveyFlowStep = surveyFlowStep;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for template.
   *
   * @param  template  String
   */
  public void setTemplate(String template) {
    this.template = template;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for template id.
   *
   * @param  templateId  Long
   */
  public void setTemplateId(Long templateId) {
    this.templateId = templateId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * setter method for unique session id.
   *
   * @param  uniqueSessionId  String
   */
  public void setUniqueSessionId(String uniqueSessionId) {
    this.uniqueSessionId = uniqueSessionId;
  }

  //~ ------------------------------------------------------------------------------------------------------------------

  /**
   * Constructs a <code>String</code> with all attributes in name = value format.
   *
   * @return  a <code>String</code> representation of this object.
   */
  @Override public String toString() {
    final String TAB = "    ";

    StringBuilder retValue = new StringBuilder();

    retValue.append("BaseChannelResult ( ").append(super.toString()).append(
      TAB).append("account = ").append(this.account).append(TAB).append(
      TAB).append("balance = ").append(this.balance).append(TAB).append(
      "currentDue = ").append(this.currentDue).append(TAB).append(
      "pastDue = ").append(this.pastDue).append(TAB).append(
      "responsible = ").append(this.responsible).append(TAB).append(
      "ruleId = ").append(this.ruleId).append(TAB).append("status = ").append(this.status).append(TAB).append(
      "strategyDate = ").append(
      this.strategyDate).append(TAB).append("template = ").append(
      this.template).append(TAB).append(" )");

    return retValue.toString();
  }
} // end class AbstractChannelResult
